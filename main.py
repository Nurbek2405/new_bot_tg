from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext
import sqlite3, re
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update, context):
    await update.message.reply_text("Hello! I'm your bot.")

async def help_command(update, context):
    await update.message.reply_text("Use /start to get started.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    app = ApplicationBuilder().token("7280297934:AAHspvKvMh7PJn4sTszwu43v4SzQWTZY7Rk").build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
    await set_bot_commands(app)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("log", log_data))
    app.add_handler(CommandHandler("edit", edit_data))
    app.add_handler(CommandHandler("delete", delete_data))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("help", show_help))

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –æ–ø—Ä–æ—Å–æ–º
    await app.run_polling()

def get_stats(user_id):
    conn = sqlite3.connect("health_bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT category, value, date FROM logs WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    conn.close()
    return rows

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
async def set_bot_commands(application):
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"),
        BotCommand("log", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Å, –≤–æ–¥–∞)"),
        BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å"),
        BotCommand("delete", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"),
        BotCommand("stats", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    ]
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await application.bot.set_my_commands(commands)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data  # –ü–æ–ª—É—á–∞–µ–º callback_data –∫–Ω–æ–ø–∫–∏

    if data == 'start':
        await query.edit_message_text("–¢—ã –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É /start")
    elif data == 'log':
        await query.edit_message_text("–¢—ã –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É /log - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
    elif data == 'edit':
        await query.edit_message_text("–¢—ã –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
    elif data == 'delete':
        await query.edit_message_text("–¢—ã –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É /delete - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
    elif data == 'stats':
        stats = get_stats(update.effective_user.id)
        if stats:
            message = "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            for category, value, date in stats:
                message += f"{category} ({date}): {value}\n"
            await query.edit_message_text(message)
        else:
            await query.edit_message_text("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ó–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /log.")
    elif data == 'help':
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –ù–∞—á–∞—Ç—å\n/log - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å\n/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(context.args) == 0:
        welcome_message = """
        –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:
        - –í–µ—Å
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã
        - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

        –ù–∞—á–Ω–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /log
        """
    else:
        # –ï—Å–ª–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏), –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        welcome_message = "–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: " + " ".join(context.args)

    await update.message.reply_text(welcome_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def create_buttons():
    buttons = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å /start", callback_data='start')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å /log", callback_data='log')],
        [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å /edit", callback_data='edit')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å /delete", callback_data='delete')],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ /stats", callback_data='stats')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å /help", callback_data='help')]
    ]
    return InlineKeyboardMarkup(buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def show_stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    conn = sqlite3.connect("health_bot.db")
    cursor = conn.cursor()

    cursor.execute("SELECT category, value, date FROM logs WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()

    if rows:
        stats = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n"
        categories = {"–≤–µ—Å": [], "–≤–æ–¥–∞": [], "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": [], "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": []}

        for row in rows:
            category, value, date = row
            value = escape_markdown_v2(value)
            stats += f"üîπ **{escape_markdown_v2(category.capitalize())}**:\nüóìÔ∏è *{escape_markdown_v2(date)}*: `{value}`\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(stats, parse_mode='MarkdownV2', reply_markup=create_buttons())
    else:
        await update.message.reply_text("üìâ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /log.",
                                        reply_markup=create_buttons())
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def show_help(update: Update, context: CallbackContext):
    help_text = """
    –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

    /start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.
    /log - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –≤–∞—à–µ–º –≤–µ—Å–µ, –≤–æ–¥–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏ —Ç.–¥.
    /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å.
    /delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.
    /stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤–µ—Å, –≤–æ–¥–∞, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ).
    /help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.

    –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–π –≤–µ—Å, —Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(help_text, reply_markup=create_buttons())

# –ö–æ–º–∞–Ω–¥–∞ /edit
async def edit_data(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if len(context.args) < 2:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /edit –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n/edit –≤–µ—Å 75")
        return

    category = context.args[0]
    new_value = " ".join(context.args[1:])

    valid_categories = ["–≤–µ—Å", "–≤–æ–¥–∞", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"]
    if category not in valid_categories:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(valid_categories)}.")
        return

    conn = sqlite3.connect("health_bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE logs SET value = ? WHERE user_id = ? AND category = ?", (new_value, user_id, category))
    conn.commit()

    if cursor.rowcount > 0:
        await update.message.reply_text(f"–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {category} - {new_value}")
    else:
        await update.message.reply_text(f"–ó–∞–ø–∏—Å—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /delete
async def delete_data(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if len(context.args) < 1:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /delete –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü—Ä–∏–º–µ—Ä:\n/delete –≤–µ—Å")
        return

    category = context.args[0]

    valid_categories = ["–≤–µ—Å", "–≤–æ–¥–∞", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"]
    if category not in valid_categories:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(valid_categories)}.")
        return

    conn = sqlite3.connect("health_bot.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM logs WHERE user_id = ? AND category = ?", (user_id, category))
    conn.commit()

    if cursor.rowcount > 0:
        await update.message.reply_text(f"–ó–∞–ø–∏—Å—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"–ó–∞–ø–∏—Å—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log
async def log(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /log –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    category = context.args[0]
    value = " ".join(context.args[1:])
    user_id = update.effective_user.id

    log_data(user_id, category, value)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await update.message.reply_text(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã: {category} - {value}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log
async def log_data(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(context.args) < 2:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /log –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n"
            "/log –≤–µ—Å 70\n"
            "–∏–ª–∏\n"
            "/log –≤–æ–¥–∞ 2"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    category = context.args[0]
    value = " ".join(context.args[1:])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è
    valid_categories = ["–≤–µ—Å", "–≤–æ–¥–∞", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"]
    if category not in valid_categories:
        await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(valid_categories)}.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("health_bot.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO logs (user_id, category, value) VALUES (?, ?, ?)", (user_id, category, value))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {category} - {value}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("health_bot.db")
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS logs (
        user_id INTEGER,
        category TEXT,
        value TEXT,
        date TEXT DEFAULT (datetime('now','localtime'))
    )
    ''')
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("health_bot.db")
cursor = conn.cursor()

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("DROP TABLE IF EXISTS logs")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ —Å –Ω—É–∂–Ω–æ–π —Å—Ö–µ–º–æ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS logs (
    user_id INTEGER,
    category TEXT,
    value TEXT,
    date TEXT DEFAULT (datetime('now','localtime'))
)
''')

conn.commit()
conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_markdown_v2(text):
    return re.sub(r'([_*[\]()>#+-.!|])', r'\\\1', text)

if __name__ == "__main__":
    print('–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!')
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    app = ApplicationBuilder().token("7280297934:AAHspvKvMh7PJn4sTszwu43v4SzQWTZY7Rk").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("log", log_data))
    app.add_handler(CommandHandler("edit", edit_data))
    app.add_handler(CommandHandler("delete", delete_data))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("help", show_help))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("log", log))
    app.add_handler(CallbackQueryHandler(button_handler))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –æ–ø—Ä–æ—Å–æ–º
    app.run_polling()
